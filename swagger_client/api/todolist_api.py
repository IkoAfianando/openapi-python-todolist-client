# coding: utf-8

"""
    Todolist RESTful API

    OpenAPI for Todolist RESTful API  # noqa: E501

    OpenAPI spec version: 1
    Contact: ikoafianando123@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TodolistApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def todolist_get(self, **kwargs):  # noqa: E501
        """Get All Todolist  # noqa: E501

        Get all todolist by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.todolist_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_done: Include done todolist in the result
        :param str name: Filter todolist by name
        :return: ArrayTodolist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.todolist_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.todolist_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def todolist_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get All Todolist  # noqa: E501

        Get all todolist by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.todolist_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_done: Include done todolist in the result
        :param str name: Filter todolist by name
        :return: ArrayTodolist
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include_done', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method todolist_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_done' in params:
            query_params.append(('include done', params['include_done']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['TodolistAuth']  # noqa: E501

        return self.api_client.call_api(
            '/todolist', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayTodolist',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def todolist_post(self, body, **kwargs):  # noqa: E501
        """Create New Todolist  # noqa: E501

        Create new todolist to database  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.todolist_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateOrUpdateTodolist body: (required)
        :return: Todolist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.todolist_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.todolist_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def todolist_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create New Todolist  # noqa: E501

        Create new todolist to database  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.todolist_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateOrUpdateTodolist body: (required)
        :return: Todolist
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method todolist_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `todolist_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['TodolistAuth']  # noqa: E501

        return self.api_client.call_api(
            '/todolist', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Todolist',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def todollist_todolist_id_delete(self, todolist_id, **kwargs):  # noqa: E501
        """Delete existing Todolist  # noqa: E501

        Delete existing todolist in database  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.todollist_todolist_id_delete(todolist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str todolist_id: Todolist id for updated (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.todollist_todolist_id_delete_with_http_info(todolist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.todollist_todolist_id_delete_with_http_info(todolist_id, **kwargs)  # noqa: E501
            return data

    def todollist_todolist_id_delete_with_http_info(self, todolist_id, **kwargs):  # noqa: E501
        """Delete existing Todolist  # noqa: E501

        Delete existing todolist in database  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.todollist_todolist_id_delete_with_http_info(todolist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str todolist_id: Todolist id for updated (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['todolist_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method todollist_todolist_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'todolist_id' is set
        if ('todolist_id' not in params or
                params['todolist_id'] is None):
            raise ValueError("Missing the required parameter `todolist_id` when calling `todollist_todolist_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'todolist_id' in params:
            path_params['todolistId'] = params['todolist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['TodolistAuth']  # noqa: E501

        return self.api_client.call_api(
            '/todollist/{todolistId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def todollist_todolist_id_put(self, body, todolist_id, **kwargs):  # noqa: E501
        """Update existing Todolist  # noqa: E501

        Update existing todolist in database  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.todollist_todolist_id_put(body, todolist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateOrUpdateTodolist body: (required)
        :param str todolist_id: Todolist id for updated (required)
        :return: Todolist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.todollist_todolist_id_put_with_http_info(body, todolist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.todollist_todolist_id_put_with_http_info(body, todolist_id, **kwargs)  # noqa: E501
            return data

    def todollist_todolist_id_put_with_http_info(self, body, todolist_id, **kwargs):  # noqa: E501
        """Update existing Todolist  # noqa: E501

        Update existing todolist in database  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.todollist_todolist_id_put_with_http_info(body, todolist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateOrUpdateTodolist body: (required)
        :param str todolist_id: Todolist id for updated (required)
        :return: Todolist
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'todolist_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method todollist_todolist_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `todollist_todolist_id_put`")  # noqa: E501
        # verify the required parameter 'todolist_id' is set
        if ('todolist_id' not in params or
                params['todolist_id'] is None):
            raise ValueError("Missing the required parameter `todolist_id` when calling `todollist_todolist_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'todolist_id' in params:
            path_params['todolistId'] = params['todolist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['TodolistAuth']  # noqa: E501

        return self.api_client.call_api(
            '/todollist/{todolistId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Todolist',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
